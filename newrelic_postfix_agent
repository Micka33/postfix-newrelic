#! /usr/bin/env ruby

#
# This is an example agent which generates synthetic data.
# A 1mHz (one cycle every 16 minutes) sin+1, cos+1 and sin+5 wave is generated,
# using the Unix epoch as the base.
#

require "rubygems"
require "bundler/setup"

require "newrelic_plugin"

module PostfixAgent

  class Agent < NewRelic::Plugin::Agent::Base

    agent_guid "cassy.mickael.postfix_plugin"
    agent_version "1.0.1"
    agent_config_options :hertz  # frequency of the periodic functions
    agent_human_labels("Postfix metric Agent") { "Synthetic Postfix data" }

    def count folder
      value = 0
      begin
        sub_level_folders = ['deferred']
        has_sub_folders = sub_level_folders.include?(folder)
        value = Dir.entries("#{@directory}/#{folder}/*").reject{|q| ['.', '..'].include?(q) }.count unless has_sub_folders
        value = Dir.glob("#{@directory}/#{folder}/*/*").reject{|q| ['.', '..'].include?(q) }.count if has_sub_folders
      rescue Errno::EACCES => e
        puts e
      end
      return value
    end

    def poll_cycle
      @directory = `postconf -h queue_directory`.strip

      incoming = count("incoming");
      active = count("active");
      deferred = count("deferred");
      bounced = count("bounce");
      hold = count("hold");
      corrupt = count("corrupt");

      report_metric 'incoming', 'Value', incoming
      report_metric 'active',   'Value', active
      report_metric 'deferred', 'Value', deferred
      report_metric 'bounced',  'Value', bounced
      report_metric 'hold',     'Value', hold
      report_metric 'corrupt',  'Value', corrupt
    end

  end

  #
  # Register this agent with the component.
  # The PostfixAgent is the name of the module that defines this
  # driver (the module must contain at least three classes - a
  # PollCycle, a Metric and an Agent class, as defined above).
  #
  NewRelic::Plugin::Setup.install_agent :postfix, PostfixAgent

  #
  # Launch the agent; this never returns.
  #
  NewRelic::Plugin::Run.setup_and_run

end
